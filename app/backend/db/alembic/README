# Database Migrations

This directory contains database migration scripts for managing database schema changes.

## Overview

We use Alembic to handle database migrations. These migrations allow us to:
- Track database schema changes in version control
- Apply consistent changes across different environments
- Roll back changes if necessary

## Structure

- `versions/`: Contains all migration scripts
- `env.py`: Configures the migration environment
- `script.py.mako`: Template for new migration scripts

## Usage

### Creating a New Migration

To create a new migration script:

```bash
cd app/backend
alembic revision --autogenerate -m "Description of changes"
```

This will automatically generate a migration script based on differences between your models and the current database.

### Applying Migrations

To apply all pending migrations:

```bash
cd app/backend
alembic upgrade head
```

To apply a specific migration:

```bash
cd app/backend
alembic upgrade <revision_id>
```

### Rolling Back Migrations

To roll back the most recent migration:

```bash
cd app/backend
alembic downgrade -1
```

To roll back to a specific migration:

```bash
cd app/backend
alembic downgrade <revision_id>
```

### Migration History

To view migration history:

```bash
cd app/backend
alembic history
```

## Best Practices

1. Always review generated migrations before committing them.
2. Keep migrations focused on a single logical change.
3. Test migrations in a development environment before applying to production.
4. Include descriptive comments in migration scripts for complex changes.
5. Make migrations reversible when possible through the downgrade() function. 